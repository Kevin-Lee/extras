"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[902],{3905:function(e,n,a){a.d(n,{Zo:function(){return d},kt:function(){return u}});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(a),u=i,v=m["".concat(p,".").concat(u)]||m[u]||c[u]||r;return a?t.createElement(v,l(l({ref:n},d),{},{components:a})):t.createElement(v,l({ref:n},d))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2626:function(e,n,a){a.r(n),a.d(n,{contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var t=a(7462),i=a(3366),r=(a(7294),a(3905)),l=["components"],o={sidebar_position:2,id:"syntax",title:"Refinement Syntax"},p=void 0,s={unversionedId:"extras-refinement/syntax",id:"extras-refinement/syntax",isDocsHomePage:!1,title:"Refinement Syntax",description:"Why refinement syntax?",source:"@site/../generated-docs/target/mdoc/extras-refinement/syntax.md",sourceDirName:"extras-refinement",slug:"/extras-refinement/syntax",permalink:"/docs/extras-refinement/syntax",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"syntax",title:"Refinement Syntax"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/extras-refinement/getting-started"}},d=[{value:"Why <code>refinement</code> syntax?",id:"why-refinement-syntax",children:[],level:2},{value:"<code>refinement</code> syntax",id:"refinement-syntax",children:[{value:"Example: Valid Case",id:"example-valid-case",children:[],level:3},{value:"Example: Invalid Case",id:"example-invalid-case",children:[{value:"Only of them is invalid",id:"only-of-them-is-invalid",children:[],level:4},{value:"The other one is invalid",id:"the-other-one-is-invalid",children:[],level:4},{value:"More than one invalid",id:"more-than-one-invalid",children:[],level:4}],level:3}],level:2}],c={toc:d};function m(e){var n=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"why-refinement-syntax"},"Why ",(0,r.kt)("inlineCode",{parentName:"h2"},"refinement")," syntax?"),(0,r.kt)("p",null,"When you use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/estatico/scala-newtype"},"newtype")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fthomas/refined"},"refined")," together\nto have better type-safety, you often have some boilerplate code for runtime value validation\nwhen creating newtype + refinement type just like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'YourRefinementType.from(value)\n  .map(YourNewtype(_))\n  .leftMap(err => s"Failed to create YourNewtype: $err")\n  .toEitherNec\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, you need to create your ",(0,r.kt)("inlineCode",{parentName:"li"},"newtype")," with the validated value."),(0,r.kt)("li",{parentName:"ul"},"If it is invalid, you probably want to add the type name for debugging with ",(0,r.kt)("inlineCode",{parentName:"li"},"leftMap"),"."),(0,r.kt)("li",{parentName:"ul"},"Finally, depending on how to validate, you probably turn the ",(0,r.kt)("inlineCode",{parentName:"li"},"Either[String, YourNewType]")," from the validation into ",(0,r.kt)("inlineCode",{parentName:"li"},"EitherNec")," since you may want to accumulate all the errors from multiple validations.")),(0,r.kt)("p",null,"In practice, it may look like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport io.estatico.newtype.macros.newtype\nimport eu.timepit.refined.types.string.NonEmptyString\n\n@newtype case class Name(value: NonEmptyString)\n\nval validNameValue = "Kevin"\n// validNameValue: String = "Kevin"\nNonEmptyString.from(validNameValue)\n  .map(Name(_))\n  .leftMap(err => s"Failed to create Name: $err")\n  .toEitherNec\n// res1: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\n\nval invalidNameValue = ""\n// invalidNameValue: String = ""\nNonEmptyString.from(invalidNameValue)\n  .map(Name(_))\n  .leftMap(err => s"Failed to create Name: $err")\n  .toEitherNec\n// res2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Name: Predicate isEmpty() did not fail."\n//   )\n// )\n')),(0,r.kt)("p",null,"or this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport io.estatico.newtype.ops._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id = PositiveInt.from(idValue)\n          .map(Id(_))\n          .leftMap(err => s"Failed to create Types.Id: $err")\n          .toEitherNec\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name = NonEmptyString.from(nameValue)\n            .map(Name(_))\n            .leftMap(err => s"Failed to create Types.Name: $err")\n            .toEitherNec\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Right(\n//   value = Person(id = 999, name = Kevin)\n// )\nprintln(person)\n// Right(Person(999,Kevin))\n')),(0,r.kt)("p",null,"or invalid case like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val idValue2 = 0\n// idValue2: Int = 0\n\nval id2 = PositiveInt.from(idValue2)\n          .map(Id(_))\n          .leftMap(err => s"Failed to create Types.Id: $err")\n          .toEitherNec\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue2 = ""\n// nameValue2: String = ""\n\nval name2 = NonEmptyString.from(nameValue2)\n            .map(Name(_))\n            .leftMap(err => s"Failed to create Types.Name: $err")\n            .toEitherNec\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person2 = (id2, name2).parMapN(Person.apply)\n// person2: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Append(\n//     leftNE = Singleton(\n//       a = "Failed to create Types.Id: Predicate failed: (0 > 0)."\n//     ),\n//     rightNE = Singleton(\n//       a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//     )\n//   )\n// )\nprintln(person2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0)., Failed to create Types.Name: Predicate isEmpty() did not fail.))\n')),(0,r.kt)("h2",{id:"refinement-syntax"},(0,r.kt)("inlineCode",{parentName:"h2"},"refinement")," syntax"),(0,r.kt)("p",null,"The boilerplate code issue in newtype + refinement type creation can be fixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"extras")," ",(0,r.kt)("inlineCode",{parentName:"p"},"refinement")," syntax so the following code snippet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'YourRefinementType.from(value)\n  .map(YourNewtype(_))\n  .leftMap(err => s"Failed to create YourNewtype: $err")\n  .toEitherNec\n')),(0,r.kt)("p",null,"becomes just"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"validateAs[YourNewtype](value)\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"value.validateAs[YourNewtype]\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The idea of ",(0,r.kt)("inlineCode",{parentName:"p"},"validateAs[A](value)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"value.validateAs[A]")," is from ",(0,r.kt)("a",{parentName:"p",href:"https://leanpub.com/pfp-scala"},"Practical FP in Scala"),".\nThe syntax is not exactly the same, but the most important core logic of using ",(0,r.kt)("inlineCode",{parentName:"p"},"Coercible")," is the same."),(0,r.kt)("p",{parentName:"div"},"If you are interested in the difference,"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/gvolpe/pfps-examples/blob/e49adf61fe5cdc84b0ca50995f20fb5a79f91cea/src/main/scala/examples/validation/RuntimeValidation.scala#L268-L294"},"the source code from ",(0,r.kt)("inlineCode",{parentName:"a"},"Practical FP in Scala")," is here")," and"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Kevin-Lee/extras/blob/3aaf342368665ba622f41874639e37b4f130a046/modules/extras-refinement/shared/src/main/scala/extras/refinement/syntax/refinement.scala#L11-L42"},"the source code of ",(0,r.kt)("inlineCode",{parentName:"a"},"extras-refinement")," is here"))))),(0,r.kt)("h3",{id:"example-valid-case"},"Example: Valid Case"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\nprintln(id2)\n// Right(999)\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\nprintln(name2)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Right(\n//   value = Person(id = 999, name = Kevin)\n// )\nprintln(person)\n// Right(Person(999,Kevin))\n')),(0,r.kt)("h3",{id:"example-invalid-case"},"Example: Invalid Case"),(0,r.kt)("h4",{id:"only-of-them-is-invalid"},"Only of them is invalid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 0\n// idValue: Int = 0\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\nprintln(name2)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n')),(0,r.kt)("h4",{id:"the-other-one-is-invalid"},"The other one is invalid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\nprintln(id2)\n// Right(999)\n\nval nameValue = ""\n// nameValue: String = ""\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n')),(0,r.kt)("h4",{id:"more-than-one-invalid"},"More than one invalid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 0\n// idValue: Int = 0\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue = ""\n// nameValue: String = ""\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Append(\n//     leftNE = Singleton(\n//       a = "Failed to create Types.Id: Predicate failed: (0 > 0)."\n//     ),\n//     rightNE = Singleton(\n//       a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//     )\n//   )\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0)., Failed to create Types.Name: Predicate isEmpty() did not fail.))\n')))}m.isMDXComponent=!0}}]);