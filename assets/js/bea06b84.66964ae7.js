"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78],{7305:function(n,a,e){e.r(a),e.d(a,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return r},toc:function(){return p},default:function(){return u}});var t=e(7462),o=e(3366),i=(e(7294),e(3905)),c=["components"],l={sidebar_position:3,id:"optiont",title:"OptionT"},s=void 0,r={unversionedId:"extras-cats/optiont",id:"extras-cats/optiont",isDocsHomePage:!1,title:"OptionT",description:"Extension Methods for OptionT",source:"@site/../generated-docs/target/mdoc/extras-cats/optiont.md",sourceDirName:"extras-cats",slug:"/extras-cats/optiont",permalink:"/docs/extras-cats/optiont",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"optiont",title:"OptionT"},sidebar:"tutorialSidebar",previous:{title:"EitherT",permalink:"/docs/extras-cats/eithert"},next:{title:"Get extras-scala-io",permalink:"/docs/extras-scala-io/get"}},p=[{value:"Extension Methods for OptionT",id:"extension-methods-for-optiont",children:[{value:"<code>optionT</code> / <code>t</code> for <code>F[Option[A]]</code>",id:"optiont--t-for-foptiona",children:[],level:3},{value:"<code>optionT</code> / <code>t</code> for <code>Option[A]</code>",id:"optiont--t-for-optiona",children:[],level:3},{value:"<code>someT</code> for <code>F[A]</code>",id:"somet-for-fa",children:[],level:3},{value:"<code>someTF</code> for <code>A</code>",id:"sometf-for-a",children:[],level:3}],level:2},{value:"Example",id:"example",children:[],level:2}],d={toc:p};function u(n){var a=n.components,e=(0,o.Z)(n,c);return(0,i.kt)("wrapper",(0,t.Z)({},d,e,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"extension-methods-for-optiont"},"Extension Methods for OptionT"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.cats.syntax.option._\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.cats.syntax.all._\n")),(0,i.kt)("h3",{id:"optiont--t-for-foptiona"},(0,i.kt)("inlineCode",{parentName:"h3"},"optionT")," / ",(0,i.kt)("inlineCode",{parentName:"h3"},"t")," for ",(0,i.kt)("inlineCode",{parentName:"h3"},"F[Option[A]]")),(0,i.kt)("p",null,"When you have ",(0,i.kt)("inlineCode",{parentName:"p"},"foa: F[Option[A]]"),", instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"OptionT(foa)"),", you can simply do"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"foa.optionT // OptionT[F, A]\n// or\nfoa.t // OptionT[F, A]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nval foa = IO.pure(1.some)\n// foa: IO[Option[Int]] = Pure(a = Some(value = 1))\nfoa.t\n// res1: cats.data.OptionT[IO, Int] = OptionT(\n//   value = Pure(a = Some(value = 1))\n// )\n\nval f = IO(println("Hello").some)\n// f: IO[Option[Unit]] = Delay(thunk = <function0>)\nf.t\n// res2: cats.data.OptionT[IO, Unit] = OptionT(\n//   value = Delay(thunk = <function0>)\n// )\n')),(0,i.kt)("h3",{id:"optiont--t-for-optiona"},(0,i.kt)("inlineCode",{parentName:"h3"},"optionT")," / ",(0,i.kt)("inlineCode",{parentName:"h3"},"t")," for ",(0,i.kt)("inlineCode",{parentName:"h3"},"Option[A]")),(0,i.kt)("p",null,"When you have ",(0,i.kt)("inlineCode",{parentName:"p"},"oa: Option[A]"),", instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"OptionT.fromOption[F](oa)"),", you can simply do"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"oa.optionT[F] // OptionT[F, A]\n// or\noa.t[F] // OptionT[F, A]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nval oa = 1.some\n// oa: Option[Int] = Some(value = 1)\noa.t[IO]\n// res4: cats.data.OptionT[IO, Int] = OptionT(\n//   value = Pure(a = Some(value = 1))\n// )\n")),(0,i.kt)("h3",{id:"somet-for-fa"},(0,i.kt)("inlineCode",{parentName:"h3"},"someT")," for ",(0,i.kt)("inlineCode",{parentName:"h3"},"F[A]")),(0,i.kt)("p",null,"When you have ",(0,i.kt)("inlineCode",{parentName:"p"},"fa: F[A]"),", instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"OptionT.liftF(fa)"),", you can simply do"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"fa.someT // OptionT[F, A]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\n\nimport extras.cats.syntax.all._\n\nval fa = IO.pure(1)\n// fa: IO[Int] = Pure(a = 1)\nfa.someT\n// res6: cats.data.OptionT[IO, Int] = OptionT(\n//   value = Map(\n//     source = Pure(a = 1),\n//     f = cats.data.OptionT$$$Lambda$9546/0x0000000102d2f840@752cce45,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.OptionT$.liftF(OptionT.scala:249),\n//         extras.cats.syntax.OptionSyntax$OptionTFAOps$.someT$extension(OptionSyntax.scala:37),\n//         repl.MdocSession$App5$.<clinit>(optiont.md:68),\n//         repl.MdocSession$App3$.<clinit>(optiont.md:53),\n//         repl.MdocSession$App0$.<clinit>(optiont.md:32),\n//         repl.MdocSession$App.<init>(optiont.md:5),\n//         repl.MdocSession$.app(optiont.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n\nval f = IO(println("Hello"))\n// f: IO[Unit] = Delay(thunk = <function0>)\nf.someT\n// res7: cats.data.OptionT[IO, Unit] = OptionT(\n//   value = Map(\n//     source = Delay(thunk = <function0>),\n//     f = cats.data.OptionT$$$Lambda$9546/0x0000000102d2f840@752cce45,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.OptionT$.liftF(OptionT.scala:249),\n//         extras.cats.syntax.OptionSyntax$OptionTFAOps$.someT$extension(OptionSyntax.scala:37),\n//         repl.MdocSession$App5$.<clinit>(optiont.md:68),\n//         repl.MdocSession$App3$.<clinit>(optiont.md:53),\n//         repl.MdocSession$App0$.<clinit>(optiont.md:32),\n//         repl.MdocSession$App.<init>(optiont.md:5),\n//         repl.MdocSession$.app(optiont.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n')),(0,i.kt)("h3",{id:"sometf-for-a"},(0,i.kt)("inlineCode",{parentName:"h3"},"someTF")," for ",(0,i.kt)("inlineCode",{parentName:"h3"},"A")),(0,i.kt)("p",null,"When you have ",(0,i.kt)("inlineCode",{parentName:"p"},"a: A"),", instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"OptionT.some(a)"),", you can simply do"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"a.someTF[F] // OptionT[F, A]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect._\n\nimport extras.cats.syntax.all._\n\nval a = 1\n// a: Int = 1\na.someTF[IO]\n// res9: cats.data.OptionT[IO, Int] = OptionT(\n//   value = Pure(a = Some(value = 1))\n// )\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nfinal case class MyError(message: String)\n\ndef foo[F[_]: Sync](n: Int): F[Int] = Sync[F].pure(n * 2)\n\ndef bar[F[_]: Sync](n: Int): F[Option[Int]] =\n  if (n < 0)\n    Sync[F].pure(none[Int])\n  else\n    Sync[F].pure((n + 100).some)\n\ndef divide[F[_]: Sync](a: Int, b: Int): F[Option[Int]] =\n  if (b == 0)\n    none[Int].pure[F]\n  else\n    Sync[F].delay((a / b).some)\n\ndef run[F[_]: Sync](): F[Option[Int]] = (for {\n  a <- foo(123).someT\n  b <- 2.someTF[F]\n  c <- bar(b).optionT\n  d <- divide(a, b).t\n} yield d).value\n\nprintln(run[IO]().unsafeRunSync())\n// Some(123)\n")))}u.isMDXComponent=!0}}]);