"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[337],{7518:function(a,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return o},toc:function(){return d},default:function(){return p}});var t=n(7462),i=n(3366),r=(n(7294),n(3905)),c=["components"],l={sidebar_position:2,id:"either",title:"Either"},s=void 0,o={unversionedId:"extras-cats/either",id:"extras-cats/either",isDocsHomePage:!1,title:"Either",description:"Extension Methods for EitherT",source:"@site/../generated-docs/target/mdoc/extras-cats/either.md",sourceDirName:"extras-cats",slug:"/extras-cats/either",permalink:"/docs/extras-cats/either",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"either",title:"Either"},sidebar:"tutorialSidebar",previous:{title:"Get extras-cats",permalink:"/docs/extras-cats/get"},next:{title:"Option",permalink:"/docs/extras-cats/option"}},d=[{value:"Extension Methods for EitherT",id:"extension-methods-for-eithert",children:[{value:"<code>eitherT</code> / <code>t</code> for <code>F[Either[A, B]]</code>",id:"eithert--t-for-feithera-b",children:[]},{value:"<code>eitherT</code> / <code>t</code> for <code>Either[A, B]</code>",id:"eithert--t-for-eithera-b",children:[]},{value:"<code>rightT</code> for <code>F[B]</code>",id:"rightt-for-fb",children:[]},{value:"<code>leftT</code> for <code>F[A]</code>",id:"leftt-for-fa",children:[]}]},{value:"Example",id:"example",children:[]}],u={toc:d};function p(a){var e=a.components,n=(0,i.Z)(a,c);return(0,r.kt)("wrapper",(0,t.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"extension-methods-for-eithert"},"Extension Methods for EitherT"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.cats.syntax.either._\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.cats.syntax.all._\n")),(0,r.kt)("h3",{id:"eithert--t-for-feithera-b"},(0,r.kt)("inlineCode",{parentName:"h3"},"eitherT")," / ",(0,r.kt)("inlineCode",{parentName:"h3"},"t")," for ",(0,r.kt)("inlineCode",{parentName:"h3"},"F[Either[A, B]]")),(0,r.kt)("p",null,"When you have ",(0,r.kt)("inlineCode",{parentName:"p"},"fab: F[Either[A, B]]"),", instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT(fab)"),", you can simply do"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"fab.eitherT // EitherT[F, A, B]\n// or\nfab.t // EitherT[F, A, B]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nval fab = IO.pure(1.asRight[String])\n// fab: IO[Either[String, Int]] = Pure(a = Right(value = 1))\nfab.t\n// res1: cats.data.EitherT[IO, String, Int] = EitherT(\n//   value = Pure(a = Right(value = 1))\n// )\n\nval f = IO(println("Hello").asRight[String])\n// f: IO[Either[String, Unit]] = Delay(thunk = <function0>)\nf.t\n// res2: cats.data.EitherT[IO, String, Unit] = EitherT(\n//   value = Delay(thunk = <function0>)\n// )\n')),(0,r.kt)("h3",{id:"eithert--t-for-eithera-b"},(0,r.kt)("inlineCode",{parentName:"h3"},"eitherT")," / ",(0,r.kt)("inlineCode",{parentName:"h3"},"t")," for ",(0,r.kt)("inlineCode",{parentName:"h3"},"Either[A, B]")),(0,r.kt)("p",null,"When you have ",(0,r.kt)("inlineCode",{parentName:"p"},"ab: Either[A, B]"),", instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT.fromEither[F](ab)"),", you can simply do"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"ab.eitherT[F] // EitherT[F, A, B]\n// or\nab.t[F] // EitherT[F, A, B]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nval ab = 1.asRight[String]\n// ab: Either[String, Int] = Right(value = 1)\nab.t[IO]\n// res4: cats.data.EitherT[IO, String, Int] = EitherT(\n//   value = Pure(a = Right(value = 1))\n// )\n")),(0,r.kt)("h3",{id:"rightt-for-fb"},(0,r.kt)("inlineCode",{parentName:"h3"},"rightT")," for ",(0,r.kt)("inlineCode",{parentName:"h3"},"F[B]")),(0,r.kt)("p",null,"When you have ",(0,r.kt)("inlineCode",{parentName:"p"},"fb: F[B]"),", instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT.right[A](fb)"),", you can simply do"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"fb.rightT[A] // EitherT[F, A, B]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\n\nimport extras.cats.syntax.all._\n\nval fb = IO.pure(1)\n// fb: IO[Int] = Pure(a = 1)\nfb.rightT[String]\n// res6: cats.data.EitherT[IO, String, Int] = EitherT(\n//   value = Map(\n//     source = Pure(a = 1),\n//     f = cats.data.EitherT$RightPartiallyApplied$$$Lambda$9405/0x0000000102c7a840@2cb25d94,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.EitherT$RightPartiallyApplied$.apply$extension(EitherT.scala:680),\n//         extras.cats.syntax.EitherSyntax$EitherTFAOps$.rightT$extension(EitherSyntax.scala:37),\n//         repl.MdocSession$App5$.<clinit>(either.md:68),\n//         repl.MdocSession$App3$.<clinit>(either.md:53),\n//         repl.MdocSession$App0$.<clinit>(either.md:32),\n//         repl.MdocSession$App.<init>(either.md:5),\n//         repl.MdocSession$.app(either.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n\nval f = IO(println("Hello"))\n// f: IO[Unit] = Delay(thunk = <function0>)\nf.rightT[String]\n// res7: cats.data.EitherT[IO, String, Unit] = EitherT(\n//   value = Map(\n//     source = Delay(thunk = <function0>),\n//     f = cats.data.EitherT$RightPartiallyApplied$$$Lambda$9405/0x0000000102c7a840@2cb25d94,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.EitherT$RightPartiallyApplied$.apply$extension(EitherT.scala:680),\n//         extras.cats.syntax.EitherSyntax$EitherTFAOps$.rightT$extension(EitherSyntax.scala:37),\n//         repl.MdocSession$App5$.<clinit>(either.md:68),\n//         repl.MdocSession$App3$.<clinit>(either.md:53),\n//         repl.MdocSession$App0$.<clinit>(either.md:32),\n//         repl.MdocSession$App.<init>(either.md:5),\n//         repl.MdocSession$.app(either.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n')),(0,r.kt)("h3",{id:"leftt-for-fa"},(0,r.kt)("inlineCode",{parentName:"h3"},"leftT")," for ",(0,r.kt)("inlineCode",{parentName:"h3"},"F[A]")),(0,r.kt)("p",null,"When you have ",(0,r.kt)("inlineCode",{parentName:"p"},"fa: F[A]"),", instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"EitherT.left[B](fa)"),", you can simply do"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"fa.leftT[B] // EitherT[F, A, B]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect._\n\nimport extras.cats.syntax.all._\n\nval fa = IO.pure("ERROR!!!")\n// fa: IO[String] = Pure(a = "ERROR!!!")\nfa.leftT[Int]\n// res9: cats.data.EitherT[IO, String, Int] = EitherT(\n//   value = Map(\n//     source = Pure(a = "ERROR!!!"),\n//     f = cats.data.EitherT$LeftPartiallyApplied$$$Lambda$9406/0x0000000102c79840@540a6798,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.EitherT$LeftPartiallyApplied$.apply$extension(EitherT.scala:644),\n//         extras.cats.syntax.EitherSyntax$EitherTFAOps$.leftT$extension(EitherSyntax.scala:38),\n//         repl.MdocSession$App8$.<clinit>(either.md:92),\n//         repl.MdocSession$App5$.<clinit>(either.md:77),\n//         repl.MdocSession$App3$.<clinit>(either.md:53),\n//         repl.MdocSession$App0$.<clinit>(either.md:32),\n//         repl.MdocSession$App.<init>(either.md:5),\n//         repl.MdocSession$.app(either.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n\nval f = IO(println("ERROR!!!"))\n// f: IO[Unit] = Delay(thunk = <function0>)\nf.leftT[Int]\n// res10: cats.data.EitherT[IO, Unit, Int] = EitherT(\n//   value = Map(\n//     source = Delay(thunk = <function0>),\n//     f = cats.data.EitherT$LeftPartiallyApplied$$$Lambda$9406/0x0000000102c79840@540a6798,\n//     trace = StackTrace(\n//       stackTrace = List(\n//         cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48),\n//         cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39),\n//         cats.effect.internals.IOTracing$.cached(IOTracing.scala:34),\n//         cats.effect.IO.map(IO.scala:106),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870),\n//         cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863),\n//         cats.data.EitherT$LeftPartiallyApplied$.apply$extension(EitherT.scala:644),\n//         extras.cats.syntax.EitherSyntax$EitherTFAOps$.leftT$extension(EitherSyntax.scala:38),\n//         repl.MdocSession$App8$.<clinit>(either.md:92),\n//         repl.MdocSession$App5$.<clinit>(either.md:77),\n//         repl.MdocSession$App3$.<clinit>(either.md:53),\n//         repl.MdocSession$App0$.<clinit>(either.md:32),\n//         repl.MdocSession$App.<init>(either.md:5),\n//         repl.MdocSession$.app(either.md:3),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withErr(Console.scala:193),\n//         mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89),\n//         scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18),\n//         scala.util.DynamicVariable.withValue(DynamicVariable.scala:59),\n//         scala.Console$.withOut(Console.scala:164),\n//         mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88),\n//         mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47),\n//         mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103)\n//       )\n//     )\n//   )\n// )\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.all._\nimport cats.effect._\n\nimport extras.cats.syntax.all._\n\nfinal case class MyError(message: String)\n\ndef foo[F[_]: Sync](n: Int): F[Int] = Sync[F].pure(n * 2)\n\ndef bar[F[_]: Sync](n: Int): F[Either[MyError, Int]] =\n  if (n < 0)\n    Sync[F].pure(MyError(s"n cannot be a negative number. [n: $n]").asLeft)\n  else\n    Sync[F].pure((n + 100).asRight)\n\ndef divide[F[_]: Sync](a: Int, b: Int): F[Either[MyError, Int]] =\n  if (b == 0)\n    MyError(s"You can divide number by 0. [a: $a, b: $b]").asLeft.pure[F]\n  else\n    Sync[F].delay((a / b).asRight)\n\ndef run[F[_]: Sync](): F[Either[MyError, Int]] = (for {\n  a <- foo(123).rightT\n  b <- 2.rightTF[F, MyError]\n  c <- bar(b).eitherT\n  d <- divide(a, b).t\n} yield d).value\n\nprintln(run[IO]().unsafeRunSync())\n// Right(123)\n')))}p.isMDXComponent=!0}}]);