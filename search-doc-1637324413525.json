[{"title":"extras","type":0,"sectionRef":"#","url":"docs/","content":"extras Project\tMaven Centralextras-cats extras-scala-io extras-concurrent extras-concurrent-testing extras-catsextras-scala-ioextras-concurrent","keywords":""},{"title":"Get extras-cats","type":0,"sectionRef":"#","url":"docs/extras-cats/get","content":"Get extras-cats \"io.kevinlee\" %% \"extras-cats\" % \"0.2.0\" Copy","keywords":""},{"title":"OptionT","type":0,"sectionRef":"#","url":"docs/extras-cats/optiont","content":"OptionT","keywords":""},{"title":"Concurrent","type":0,"sectionRef":"#","url":"docs/extras-concurrent/concurrent","content":"Concurrent","keywords":""},{"title":"EitherT","type":0,"sectionRef":"#","url":"docs/extras-cats/eithert","content":"","keywords":""},{"title":"Extension Methods for EitherT​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#extension-methods-for-eithert","content":"import extras.cats.syntax.either._ Copy or import extras.cats.syntax.all._ Copy "},{"title":"eitherT / t for F[Either[A, B]]​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#eithert--t-for-feithera-b","content":"When you have fab: F[Either[A, B]], instead of EitherT(fab), you can simply do fab.eitherT // EitherT[F, A, B] // or fab.t // EitherT[F, A, B] Copy import cats.syntax.all._ import cats.effect._ import extras.cats.syntax.all._ val fab = IO.pure(1.asRight[String]) // fab: IO[Either[String, Int]] = Pure(a = Right(value = 1)) fab.t // res1: cats.data.EitherT[IO, String, Int] = EitherT( // value = Pure(a = Right(value = 1)) // ) val f = IO(println(\"Hello\").asRight[String]) // f: IO[Either[String, Unit]] = Delay(thunk = <function0>) f.t // res2: cats.data.EitherT[IO, String, Unit] = EitherT( // value = Delay(thunk = <function0>) // ) Copy "},{"title":"eitherT / t for Either[A, B]​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#eithert--t-for-eithera-b","content":"When you have ab: Either[A, B], instead of EitherT.fromEither[F](ab), you can simply do ab.eitherT[F] // EitherT[F, A, B] // or ab.t[F] // EitherT[F, A, B] Copy import cats.syntax.all._ import cats.effect._ import extras.cats.syntax.all._ val ab = 1.asRight[String] // ab: Either[String, Int] = Right(value = 1) ab.t[IO] // res4: cats.data.EitherT[IO, String, Int] = EitherT( // value = Pure(a = Right(value = 1)) // ) Copy "},{"title":"rightT for F[B]​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#rightt-for-fb","content":"When you have fb: F[B], instead of EitherT.right[A](fb), you can simply do fb.rightT[A] // EitherT[F, A, B] Copy import cats.effect._ import extras.cats.syntax.all._ val fb = IO.pure(1) // fb: IO[Int] = Pure(a = 1) fb.rightT[String] // res6: cats.data.EitherT[IO, String, Int] = EitherT( // value = Map( // source = Pure(a = 1), // f = cats.data.EitherT$RightPartiallyApplied$$$Lambda$9421/0x0000000102cd7840@43559c44, // trace = StackTrace( // stackTrace = List( // cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48), // cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39), // cats.effect.internals.IOTracing$.cached(IOTracing.scala:34), // cats.effect.IO.map(IO.scala:106), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863), // cats.data.EitherT$RightPartiallyApplied$.apply$extension(EitherT.scala:680), // extras.cats.syntax.EitherSyntax$EitherTFAOps$.rightT$extension(EitherSyntax.scala:37), // repl.MdocSession$App5$.<clinit>(eithert.md:68), // repl.MdocSession$App3$.<clinit>(eithert.md:53), // repl.MdocSession$App0$.<clinit>(eithert.md:32), // repl.MdocSession$App.<init>(eithert.md:5), // repl.MdocSession$.app(eithert.md:3), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withErr(Console.scala:193), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withOut(Console.scala:164), // mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88), // mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47), // mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103) // ) // ) // ) // ) val f = IO(println(\"Hello\")) // f: IO[Unit] = Delay(thunk = <function0>) f.rightT[String] // res7: cats.data.EitherT[IO, String, Unit] = EitherT( // value = Map( // source = Delay(thunk = <function0>), // f = cats.data.EitherT$RightPartiallyApplied$$$Lambda$9421/0x0000000102cd7840@43559c44, // trace = StackTrace( // stackTrace = List( // cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48), // cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39), // cats.effect.internals.IOTracing$.cached(IOTracing.scala:34), // cats.effect.IO.map(IO.scala:106), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863), // cats.data.EitherT$RightPartiallyApplied$.apply$extension(EitherT.scala:680), // extras.cats.syntax.EitherSyntax$EitherTFAOps$.rightT$extension(EitherSyntax.scala:37), // repl.MdocSession$App5$.<clinit>(eithert.md:68), // repl.MdocSession$App3$.<clinit>(eithert.md:53), // repl.MdocSession$App0$.<clinit>(eithert.md:32), // repl.MdocSession$App.<init>(eithert.md:5), // repl.MdocSession$.app(eithert.md:3), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withErr(Console.scala:193), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withOut(Console.scala:164), // mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88), // mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47), // mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103) // ) // ) // ) // ) Copy "},{"title":"leftT for F[A]​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#leftt-for-fa","content":"When you have fa: F[A], instead of EitherT.left[B](fa), you can simply do fa.leftT[B] // EitherT[F, A, B] Copy import cats.effect._ import extras.cats.syntax.all._ val fa = IO.pure(\"ERROR!!!\") // fa: IO[String] = Pure(a = \"ERROR!!!\") fa.leftT[Int] // res9: cats.data.EitherT[IO, String, Int] = EitherT( // value = Map( // source = Pure(a = \"ERROR!!!\"), // f = cats.data.EitherT$LeftPartiallyApplied$$$Lambda$9422/0x0000000102cd6840@77d48621, // trace = StackTrace( // stackTrace = List( // cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48), // cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39), // cats.effect.internals.IOTracing$.cached(IOTracing.scala:34), // cats.effect.IO.map(IO.scala:106), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863), // cats.data.EitherT$LeftPartiallyApplied$.apply$extension(EitherT.scala:644), // extras.cats.syntax.EitherSyntax$EitherTFAOps$.leftT$extension(EitherSyntax.scala:38), // repl.MdocSession$App8$.<clinit>(eithert.md:92), // repl.MdocSession$App5$.<clinit>(eithert.md:77), // repl.MdocSession$App3$.<clinit>(eithert.md:53), // repl.MdocSession$App0$.<clinit>(eithert.md:32), // repl.MdocSession$App.<init>(eithert.md:5), // repl.MdocSession$.app(eithert.md:3), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withErr(Console.scala:193), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withOut(Console.scala:164), // mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88), // mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47), // mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103) // ) // ) // ) // ) val f = IO(println(\"ERROR!!!\")) // f: IO[Unit] = Delay(thunk = <function0>) f.leftT[Int] // res10: cats.data.EitherT[IO, Unit, Int] = EitherT( // value = Map( // source = Delay(thunk = <function0>), // f = cats.data.EitherT$LeftPartiallyApplied$$$Lambda$9422/0x0000000102cd6840@77d48621, // trace = StackTrace( // stackTrace = List( // cats.effect.internals.IOTracing$.buildFrame(IOTracing.scala:48), // cats.effect.internals.IOTracing$.buildCachedFrame(IOTracing.scala:39), // cats.effect.internals.IOTracing$.cached(IOTracing.scala:34), // cats.effect.IO.map(IO.scala:106), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:870), // cats.effect.IOLowPriorityInstances$IOEffect.map(IO.scala:863), // cats.data.EitherT$LeftPartiallyApplied$.apply$extension(EitherT.scala:644), // extras.cats.syntax.EitherSyntax$EitherTFAOps$.leftT$extension(EitherSyntax.scala:38), // repl.MdocSession$App8$.<clinit>(eithert.md:92), // repl.MdocSession$App5$.<clinit>(eithert.md:77), // repl.MdocSession$App3$.<clinit>(eithert.md:53), // repl.MdocSession$App0$.<clinit>(eithert.md:32), // repl.MdocSession$App.<init>(eithert.md:5), // repl.MdocSession$.app(eithert.md:3), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withErr(Console.scala:193), // mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89), // scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18), // scala.util.DynamicVariable.withValue(DynamicVariable.scala:59), // scala.Console$.withOut(Console.scala:164), // mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88), // mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:47), // mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:103) // ) // ) // ) // ) Copy "},{"title":"Example​","type":1,"pageTitle":"EitherT","url":"docs/extras-cats/eithert#example","content":"import cats.syntax.all._ import cats.effect._ import extras.cats.syntax.all._ final case class MyError(message: String) def foo[F[_]: Sync](n: Int): F[Int] = Sync[F].pure(n * 2) def bar[F[_]: Sync](n: Int): F[Either[MyError, Int]] = if (n < 0) Sync[F].pure(MyError(s\"n cannot be a negative number. [n: $n]\").asLeft) else Sync[F].pure((n + 100).asRight) def divide[F[_]: Sync](a: Int, b: Int): F[Either[MyError, Int]] = if (b == 0) MyError(s\"You can divide number by 0. [a: $a, b: $b]\").asLeft.pure[F] else Sync[F].delay((a / b).asRight) def run[F[_]: Sync](): F[Either[MyError, Int]] = (for { a <- foo(123).rightT b <- 2.rightTF[F, MyError] c <- bar(b).eitherT d <- divide(a, b).t } yield d).value println(run[IO]().unsafeRunSync()) // Right(123) Copy "},{"title":"Get extras-concurrent","type":0,"sectionRef":"#","url":"docs/extras-concurrent/get","content":"","keywords":""},{"title":"Get extras-concurrent​","type":1,"pageTitle":"Get extras-concurrent","url":"docs/extras-concurrent/get#get-extras-concurrent-1","content":"\"io.kevinlee\" %% \"extras-concurrent\" % \"0.2.0\" Copy "},{"title":"Get extras-concurrent-testing​","type":1,"pageTitle":"Get extras-concurrent","url":"docs/extras-concurrent/get#get-extras-concurrent-testing","content":"\"io.kevinlee\" %% \"extras-concurrent-testing\" % \"0.2.0\" % Test Copy "},{"title":"Usage​","type":1,"pageTitle":"Get extras-concurrent","url":"docs/extras-concurrent/get#usage","content":""},{"title":"Get extras-scala-io","type":0,"sectionRef":"#","url":"docs/extras-scala-io/get","content":"","keywords":""},{"title":"Get extras-scala-io​","type":1,"pageTitle":"Get extras-scala-io","url":"docs/extras-scala-io/get#get-extras-scala-io-1","content":"\"io.kevinlee\" %% \"extras-scala-io\" % \"0.2.0\" Copy "},{"title":"Usage​","type":1,"pageTitle":"Get extras-scala-io","url":"docs/extras-scala-io/get#usage","content":""}]